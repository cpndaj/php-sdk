<?php
/**
 * ReturnSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tradenity\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Tradenity API
 *
 * Tradenity eCommerce Rest API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tradenity.com
 * By: https://github.com/tradenity
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tradenity\SDK\Resources;

use \ArrayAccess;
use \Tradenity\SDK\ObjectSerializer;

/**
 * ReturnSettings Class Doc Comment
 *
 * @category Class
 * @package  Tradenity\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReturnSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReturnSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        
        'allow_return' => 'bool',
        'return_action' => 'string',
        'return_cost' => 'int',
        'return_refund_shipping' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        
        'allow_return' => null,
        'return_action' => null,
        'return_cost' => 'int32',
        'return_refund_shipping' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        
        'allow_return' => 'allowReturn',
        'return_action' => 'returnAction',
        'return_cost' => 'returnCost',
        'return_refund_shipping' => 'returnRefundShipping'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        
        'allow_return' => 'setAllowReturn',
        'return_action' => 'setReturnAction',
        'return_cost' => 'setReturnCost',
        'return_refund_shipping' => 'setReturnRefundShipping'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        
        'allow_return' => 'getAllowReturn',
        'return_action' => 'getReturnAction',
        'return_cost' => 'getReturnCost',
        'return_refund_shipping' => 'getReturnRefundShipping'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnActionAllowableValues()
    {
        return [
            
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_return'] = isset($data['allow_return']) ? $data['allow_return'] : null; 
        $this->container['allow_return'] = isset($data['allowReturn']) ? $data['allowReturn'] : null;
        $this->container['return_action'] = isset($data['return_action']) ? $data['return_action'] : null; 
        $this->container['return_action'] = isset($data['returnAction']) ? $data['returnAction'] : null;
        $this->container['return_cost'] = isset($data['return_cost']) ? $data['return_cost'] : null; 
        $this->container['return_cost'] = isset($data['returnCost']) ? $data['returnCost'] : null;
        $this->container['return_refund_shipping'] = isset($data['return_refund_shipping']) ? $data['return_refund_shipping'] : null; 
        $this->container['return_refund_shipping'] = isset($data['returnRefundShipping']) ? $data['returnRefundShipping'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReturnActionAllowableValues();
        if (!is_null($this->container['return_action']) && !in_array($this->container['return_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'return_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets allow_return
     *
     * @return bool
     */
    public function getAllowReturn()
    {
        return $this->container['allow_return'];
    }

    /**
     * Sets allow_return
     *
     * @param bool $allow_return allow_return
     *
     * @return $this
     */
    public function setAllowReturn($allow_return)
    {
        /**/
        $this->container['allow_return'] = $allow_return;

        return $this;
    }

    /**
     * Gets return_action
     *
     * @return string
     */
    public function getReturnAction()
    {
        return $this->container['return_action'];
    }

    /**
     * Sets return_action
     *
     * @param string $return_action return_action
     *
     * @return $this
     */
    public function setReturnAction($return_action)
    {
        /*
        $allowedValues = $this->getReturnActionAllowableValues();
        if (!is_null($return_action) && !in_array($return_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'return_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
*/
        $this->container['return_action'] = $return_action;

        return $this;
    }

    /**
     * Gets return_cost
     *
     * @return int
     */
    public function getReturnCost()
    {
        return $this->container['return_cost'];
    }

    /**
     * Sets return_cost
     *
     * @param int $return_cost return_cost
     *
     * @return $this
     */
    public function setReturnCost($return_cost)
    {
        /**/
        $this->container['return_cost'] = $return_cost;

        return $this;
    }

    /**
     * Gets return_refund_shipping
     *
     * @return bool
     */
    public function getReturnRefundShipping()
    {
        return $this->container['return_refund_shipping'];
    }

    /**
     * Sets return_refund_shipping
     *
     * @param bool $return_refund_shipping return_refund_shipping
     *
     * @return $this
     */
    public function setReturnRefundShipping($return_refund_shipping)
    {
        /**/
        $this->container['return_refund_shipping'] = $return_refund_shipping;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


